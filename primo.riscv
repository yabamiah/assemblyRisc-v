.data
inv: .string "Entrada invalida.\n"
sim: .string "sim\n"
nao: .string "nao\n"

.text
main:
	
	li a7, 5
	ecall
	mv s2, a0
	
	jal invalido
	
	beqz a0, invalido_out
	
	li t0, 1
	beq s2, t0, nao_out
	
	mv a0, s2
	jal primo
	
	beqz a0, nao_out
	j sim_out

	invalido_out:
		la a0, inv
		li a7, 4
		ecall
		
		li a7, 10
		ecall
		
	nao_out:
		la a0, nao
		li a7, 4
		ecall
		
		li a7, 10
		ecall
	
	sim_out:
		la a0, sim
		li a7, 4
		ecall
		
		li a7, 10
		ecall

invalido:
	blez a0, e_invalido # Verificando se o numero é zero ou negativo
	
	j end0
	e_invalido:
		li a0, 0 # Se sim, retorna 0
		jr ra
	
	end0:
		li a0, 1 # Se não, retorna 1
		jr ra
	
primo:
	mv s0, a0
	li t0, 2
	
	for:
		mul t1, t0, t0
		bgt t1, s0, done
		
		rem t3, s0, t0
		beqz t3, naoeprimo
		
		addi t0, t0, 1
		j for
	naoeprimo:
		li a0, 0 # Se não for primo, retorna 0
		jr ra
	done: 
		li a0, 1 # Se for, retorna 1
		jr ra